<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd
    	http://www.springframework.org/schema/context
    	http://www.springframework.org/schema/context/spring-context.xsd
    	http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- Step 3: Add support for component scanning -->
	<context:component-scan
		base-package="com.arthurfp.springdemo" />

	<!-- Step 4: Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven />

	<!-- Step 5: Define Spring MVC view resolver -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- load custom message resources -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">

		<property name="basename" value="messages" />

	</bean>

	<!-- to load Javascript, css and/or images (inside resources folder) -->
	<mvc:resources mapping="/resources/**"
		location="/resources/"></mvc:resources>
	<!-- Maybe: <mvc:resources mapping="classpath*:resources/**" location="classpath*:resources/"></mvc:resources> 
	Or maybe since resources is deployed in web-inf/classes, maybe remove the "resources" from path-->

	<!-- Example in JSP <link rel="stylesheet" type="text/css" href="${pageContext.request.contextPath}/resources/css/my-test.css"> 
		<script src="${pageContext.request.contextPath}/resources/js/simple-test.js"></script> 
		<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png" 
		/> -->

</beans>





